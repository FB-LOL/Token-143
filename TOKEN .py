import base64
exec(base64.b64decode(b'IyAtKi0gY29kaW5nOnV0Zi04IC0qLQojIE5hbWUgICAgOiBDT09LSUUgTUFLRVIKIyBBdXRob3IgIDogSEFESSBBTkhBRiBBSU1BTgojIHJlcG8gOiBnaXRodWIuY29tL01SLUNPREUtMTQzL09QRU4tWEQKIyA8LS0tLS0tLS0tLS0tISBNUi1DT0RFLTE0MyAhLS0tLS0tLS0tLS0tPiAjCnRyeToKICAgIGltcG9ydCBvcyxzeXMsanNvbgogICAgaW1wb3J0IHJhbmRvbSxzdHJpbmcKICAgIGltcG9ydCByZXF1ZXN0cyx1dWlkCiAgICBmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yCmV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsRXhjZXB0aW9uKToKICAgIHByaW50KCIgU29tZXRoaW5nIHdlbnQgd3JvbmcuLi4iKQogICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCByZXF1ZXN0cyByaWNoID4gL2Rldi9udWxsIikKICAgIHBhc3MKCmRlZiBiYW5uZXIoKToKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQoZiIiIlx4MWJbOTdtCiAgICAK4paI4paI4paI4paI4paI4paI4paI4paI4pWX4paR4paI4paI4paI4paI4paI4pWX4paR4paI4paI4pWX4paR4paR4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4pWX4paR4paR4paI4paI4pWXCuKVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkeKWkeKWiOKWiOKVlOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKWiOKWiOKVl+KWkeKWiOKWiOKVkQrilpHilpHilpHilojilojilZHilpHilpHilpHilojilojilZHilpHilpHilojilojilZHilojilojilojilojilojilZDilZ3ilpHilojilojilojilojilojilZfilpHilpHilojilojilZTilojilojilZfilojilojilZEK4paR4paR4paR4paI4paI4pWR4paR4paR4paR4paI4paI4pWR4paR4paR4paI4paI4pWR4paI4paI4pWU4pWQ4paI4paI4pWX4paR4paI4paI4pWU4pWQ4pWQ4pWd4paR4paR4paI4paI4pWR4pWa4paI4paI4paI4paI4pWRCuKWkeKWkeKWkeKWiOKWiOKVkeKWkeKWkeKWkeKVmuKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkeKWkeKVmuKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkeKWkeKVmuKWiOKWiOKWiOKVkQrilpHilpHilpHilZrilZDilZ3ilpHilpHilpHilpHilZrilZDilZDilZDilZDilZ3ilpHilZrilZDilZ3ilpHilpHilZrilZDilZ3ilZrilZDilZDilZDilZDilZDilZDilZ3ilZrilZDilZ3ilpHilpHilZrilZDilZDilZ0KXDMzWzMxOzFtICjigKIpIE5VTUJFUixQQVNTIFRPIENPT0tJRSBHRU5FUkFUT1IKXDMzWzMyOzFtICjigKIpIERFVkVMT1BFUiAgIDogVE9ISU4gS0lORyAKXDMzWzMzOzFtICjigKIpIFJFUE8gOiBnaXRodWIuY29tL1RPSElOLTE0My9PUEVOCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiIiKQoKY2xhc3MgYWltYW46CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi51Z2VuID0gIltGQkFOL0ZCNEE7RkJBVi8yNzIuMC4wLjUwLjEyNTtGQkJWLzIxNjg0NTU5OTtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0yMTc1fTtGQkxDL2VuX1VTO0ZCUlYvMjE3NzUzNjgwO0ZCQ1IvU3ByaW50O0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvU00tRzk2NVU7RkJTVi8xMDtGQk9QLzE5O0ZCQ0EvYXJtNjQtdjhhOjtdIgogICAgICAgIHNlbGYuc2VzcyA9IHJlcXVlc3RzLlNlc3Npb24oKQogICAgICAgIHNlbGYudXJsID0gImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4iCiAgICBkZWYgbWVudShzZWxmKToKICAgICAgICBiYW5uZXIoKQogICAgICAgIHByaW50KCIgKOKAoikgRU5URVIgWU9VUiBFTUFJTC9OVU1CRVIiKQogICAgICAgIG1haWwgPSBpbnB1dCgiICjigKIpIEVNQUlMICAgICA6ICIpCiAgICAgICAgcHJpbnQoNDQqIi0iKQogICAgICAgIHByaW50KCIgKOKAoikgRU5URVIgWU9VUiBQQVNTV09SRCIpCiAgICAgICAgcGFzID0gaW5wdXQoIiAo4oCiKSBQQVNTV09SRCAgOiAiKQogICAgICAgIHByaW50KDQ0KiItIikKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAiYWRpZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgImZvcm1hdCI6ICJqc29uIiwKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgICAgICJjcGwiOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICAiZmFtaWx5X2RldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwKICAgICAgICAgICAgICAgICJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsCiAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsCiAgICAgICAgICAgICAgICAiZW1haWwiOm1haWwsCiAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiBwYXMsCiAgICAgICAgICAgICAgICAiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOCU3QzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyIiwKICAgICAgICAgICAgICAgICJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsCiAgICAgICAgICAgICAgICAibWV0YV9pbmZfZmJtZXRhIjogIiIsCiAgICAgICAgICAgICAgICAiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAgICAgImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLAogICAgICAgICAgICAgICAgImxvY2FsZSI6ICJlbl9VUyIsCiAgICAgICAgICAgICAgICAiY2xpZW50X2NvdW50cnlfY29kZSI6ICJVUyIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLAogICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLAogICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIiwKICAgICAgICAgICAgICAgICJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIiwKICAgICAgICAgICAgfQogICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBzZWxmLnVnZW4sCiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICAgICAnSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLAogICAgICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksCiAgICAgICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAnTU9CSUxFLkxURScsCiAgICAgICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6ICdGYWxzZScsCiAgICAgICAgICAgICAgICAneC1mYi1zZXNzaW9uLWlkJzogJ25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9ZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLAogICAgICAgICAgICAgICAgJ3gtZmItZGV2aWNlLWdyb3VwJzogJzUxMjAnLAogICAgICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6ICdWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsCiAgICAgICAgICAgICAgICAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzogJ2dyYXBoc2VydmljZScsCiAgICAgICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsCiAgICAgICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsCiAgICAgICAgICAgICAgICAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywKICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdG9rZW4nOiAnZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLnNlc3MucG9zdChzZWxmLnVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkZXJzKS5qc29uKCkKICAgICAgICAgICAgaWYgImFjY2Vzc190b2tlbiIgaW4gcmVzcG9uc2U6CiAgICAgICAgICAgICAgICBzZWxmLnRva2VuID0gc3RyKHJlc3BvbnNlWyJhY2Nlc3NfdG9rZW4iXSkKICAgICAgICAgICAgICAgIHNlbGYuY29va2llID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHJlc3BvbnNlWyJzZXNzaW9uX2Nvb2tpZXMiXSkKICAgICAgICAgICAgICAgIHByaW50KCJcdFx0TE9HSU4gU1VDQ0VTU0ZVTEwiKQogICAgICAgICAgICAgICAgcHJpbnQoNDQqIi0iKQogICAgICAgICAgICAgICAgcHJpbnQoZiIgKOKAoikgVE9LRU4gIDogXHgxYls5Mm17c2VsZi50b2tlbn1ceDFiWzk3bSIpCiAgICAgICAgICAgICAgICBwcmludCg0NCoiLSIpCiAgICAgICAgICAgICAgICBwcmludChmIiAo4oCiKSBDT09LSUUgOiBceDFiWzkybXtzZWxmLmNvb2tpZX1ceDFiWzk3bSIpCiAgICAgICAgICAgICAgICBwcmludCg0NCoiLSIpCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgICAgIGVsaWYgIlVzZXIgbXVzdCB2ZXJpZnkgdGhlaXIgYWNjb3VudCIgaW4gcmVzcG9uc2U6CiAgICAgICAgICAgICAgICBzeXMuZXhpdCgiICjigKIpIENIRUNLUE9JTlQgSUQgQlJPICEhIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN5cy5leGl0KCIgKOKAoikgRU1BSUwvUEFTU1dPUkQgV1JPTkciKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcGFzcwoKaWYgX19uYW1lX18gPT0iX19tYWluX18iOgogICAgYWltYW4oKS5tZW51KCk='))